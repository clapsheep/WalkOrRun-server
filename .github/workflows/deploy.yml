name: Deploy to Amazon ECR

on:
 push:
   branches: [ "main" ]
 pull_request:
   branches: [ "main" ]

env:
 AWS_REGION: ap-northeast-2
 ECR_REPOSITORY: running-server
 
jobs:
 deploy:
   name: Deploy
   runs-on: ubuntu-latest
   environment: 
     name: production
     url: ${{ steps.deployment.outputs.url }}

   steps:
   - name: Checkout
     uses: actions/checkout@v3

   - name: Set up JDK 17
     uses: actions/setup-java@v3
     with:
       java-version: '17'
       distribution: 'temurin'

   - name: Cache Gradle packages
     uses: actions/cache@v3
     with:
       path: |
         ~/.gradle/caches
         ~/.gradle/wrapper
       key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
       restore-keys: |
         ${{ runner.os }}-gradle-

   - name: Build with Gradle
     uses: gradle/gradle-build-action@v2
     with:
       arguments: build

   - name: Configure AWS credentials
     uses: aws-actions/configure-aws-credentials@v1
     with:
       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       aws-region: ${{ env.AWS_REGION }}

   - name: Login to Amazon ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1

   - name: Build, tag, and push image to Amazon ECR
     id: build-image
     env:
       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
       IMAGE_TAG: latest
     run: |
       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

   - name: Start Deployment
     id: deployment
     run: |
       echo "url=http://${{ secrets.AWS_EC2_HOST }}:8080" >> $GITHUB_OUTPUT

   - name: Deploy to EC2
     uses: appleboy/ssh-action@v1.0.0
     with:
       host: ${{ secrets.AWS_EC2_HOST }}
       username: ${{ secrets.AWS_EC2_USERNAME }}
       key: ${{ secrets.AWS_EC2_SSH_KEY }}
       script: |
         aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
         cd ~/running-project
         docker-compose down
         docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
         docker-compose up -d

   - name: Clean up Gradle Cache
     run: |
       rm -f ~/.gradle/caches/modules-2/modules-2.lock
       rm -f ~/.gradle/caches/modules-2/gc.properties
